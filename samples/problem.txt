Неотрицательная матричная факторизация.
Постановка задачи.

Задача неотрицательной матричной факторизации может быть сформулирована следующим образом.
Для матрицы      и числа
необходимо найти  такие матрицы          чтобы было верным приближенное равенство.

Произведение  называется неотрицательной факторизацией матрицы . Неравенства   ,   ,    означают что все элементы соответствующих матриц неотрицательны.
Качество приближения по формуле eq:problem можно оценить различными способами, такими как норма Фробениуса,
дивергенция Кульбака-Лейблера и некоторыми другими.

Ниже будет использован несколько модифицированный вариант нормы Фробениуса,
который будем называть относительной погрешностью нормы Фробениуса.


В идеальном случае, когда    матрица  равна произведению .
На практике это далеко не всегда так, и почти всегда произведение  является приближенным разложением ранга не более .


Учитывая все вышесказанное задачу неотрицательной матричной факторизации можно сформулировать следующим образом.

Задача неотрицательной матричной факторизации.

Для матрицы      и числа
необходимо найти матрицы          минимизируя функционал.


Задача (1.3) является невыпуклой задачей оптимизации относительно переменных  и ,
и нахождение ее глобального минимума является NP-сложной задачей.
Поэтому ожидается, что хороший алгоритм будет вычислять некоторый удовлетворительный локальный минимум задачи (1.3).

Правильный выбор значения  является критически важным для получения удовлетворительного результата,
но также выбор  очень часто зависит от природы решаемой задачи и поставленного вопроса.
В большинстве случаев,  обычно выбирают таким образом, чтобы ,
и в этом случае произведение  можно рассматривать как сжатую форму данных матрицы .

Ключевой характеристикой неотрицательной матричной факторизации является возможность
использования численных методов для минимизации (1.3)
для извлечения некоторых базовых признаков в качестве базисных векторов матрицы ,
которые затем могут быть использованы для поиска и классификации.





Одной их важных проблем, влияющих на численную минимизацию (1.3),
является существование локальных минимумов
из-за невыпуклости (1.3) как по , так и по .
Не менее важной проблемой является отсутствие единственного решения,
которое можно легко увидеть, рассматривая произведение  для любой неотрицательной обратимой матрицы .

Несмотря на многие недостатки неотрицательная матричная факторизация весьма привлекательна для приложений интеллектуального анализа данных,
поскольку на практике даже локальные минимумы могут обеспечивать желаемые свойства, такие как сжатие данных и извлечение базовых признаков.










Методы решения задачи НМФ.

Существует множество различных способов решения задачи неотрицательной матричной факторизации.
Самыми популярными и наиболее исследованным являются: метод главных компонент, усеченное сингулярное разложение и методы неотрицательной матричной факторизации.
Стоит отметить что все вышеперечисленные методы решают задачу неотрицательной матричной факторизации,
однако название "метод неотрицательной матричной факторизации" обычно применимо только к методам решающим задачу в формулировке (1.3).
Ниже будут рассмотрены некоторые методы численного решения задачи неотрицательной матричной факторизации.

Численные методы решения задачи.
Численные методы решения задачи неотрицательной матричной факторизации
могут быть поделены на следующие основные категории:

	Методы мультипликативного обновления,
	Методы попеременных наименьших квадратов,
	Методы градиентного спуска.

К методам мультипликативного обновления принадлежит классический метод мультипликативного обновления,
разработанный Lee и Seung,
а также множество основанных на нём методов, улучшающих его сходимость.

К методам попеременных наименьших квадратов относится семейство методов,
использующих тот факт, что задача разрешима отдельно по каждой переменной.

К методам градиентного спуска относятся такие методы, как метод проецированного градиентного спуска и другие.

В ходе работы были исследованы 2 категории методов: методы мультипликативного обновления и методы попеременных наименьших квадратов.
Далее будут подробнее рассмотрены самые распространенные методы из этих категорий.

Метод мультипликативного обновления.

Алгоритм был разработан Daniel D. Lee и H. Sebastian Seung в 2001 году.
Lee и Seung использовали градиент и свойства непрерывного спуска (точнее, непрерывного невозрастания),
чтобы утверждать, что данный алгоритм сходится к локальному минимуму.
Фактически, доказательство показывает свойство непрерывного спуска (невозрастания),
которое не исключает достижения только локального минимума.

Добавление  в каждом правиле обновления необходимо чтобы избежать деления на ноль.
Обозначение  подразумевает покомпонентное умножение матриц.

Если исходные матрицы  и  неотрицательны, то эти матрицы остаются неотрицательными на протяжении всех итераций.
Это утверждение легко подтверждается опираясь на мультипликативную форму правил обновления.

Благодаря своему статусу первых известных алгоритмов неотрицательной матричной факторизации
алгоритмы мультипликативного обновления стали основой,
с которой сравниваются более новые алгоритмы.
Неоднократно было показано, что данные алгоритмы медленно сходятся.
Они требуют намного больше итераций и являются более трудоёмкими, чем альтернативы, такие как алгоритмы градиентного спуска и попеременных наименьших квадратов.
Каждая итерация требует шести  матричных умножений полностью плотных матриц и шести  покомпонентных умножений матриц.
Тем не менее, хорошие реализации могут улучшить ситуацию.
Например, в правиле обновления для , для которого требуется произведение , сначала необходимо вычислить малое  произведение .


Ниже приведена реализация данного алгоритма на языке программирования Python 3.







Метод попеременных наименьших квадратов.

В этом методе за шагом наименьших квадратов следует другой шаг наименьших квадратов поочередно.
Впервые методы попеременных наименьших квадратов были использованы в работе Paatero.

Метод использует тот факт, что задача минимизации выражения (1.3) не является выпуклой относительно  и  одновременно,
но является выпуклой относительно  или  по отдельности.
Таким образом, для одной матрицы другая матрица может быть найдена решением простой задачи наименьших квадратов.






Здесь проецирование на неотрицательную область означает обнуление всех отрицательных элементов, полученных в результате
вычисления решения.

Эта простая техника также имеет несколько дополнительные преимуществ:
она способствует разреженности матрицы, а кроме того добавляет гибкости итерациям,
которая недоступна в других алгоритмах, особенно в алгоритмах мультипликативного обновления.
Одним из недостатков алгоритмов мультипликативного обновления является то,
что если элемент в  или  становится равным ,
то он будет оставаться равным  на протяжении всех итераций.
Эта блокировка нулевых элементов является большим ограничением алгоритма,
что означает как только алгоритм начинает двигаться вниз по пути к фиксированной точке,
даже если это плохая фиксированная точка, алгоритм продолжит двигаться в направлении к этой точке.
Алгоритмы попеременных наименьших квадратов являются более гибкими,
позволяя итеративному процессу сойти с плохого пути.








Существует множество различных реализаций метода наименьших квадратов.
Каждая реализация основывается на различном методе решения задачи наименьших квадратов.

Далее рассмотрены самые популярные и эффективные реализации метода попеременных наименьших квадратов.

Метод нормальных уравнений.

Данный алгоритм является базовым из семейства алгоритмов попеременных наименьших квадратов.
Задач наименьших квадратов решается следующим способом.
Необходимо находить значения  и  на каждой итерации и приведённых ниже уравнений.




На практике алгоритм очень чувствителен к накапливанию вычислительной погрешности,
а также, хоть поддерживает работу с разреженными матрицами, имеет проблемы при работе с вырожденными матрицами.
Так как разреженные матрицы обычно имеют не полный, весьма маленький ранг,
велика вероятность того, что одна из матриц ,  также будет не полного ранга.
Ситуации такого рода ведут к невозможности продолжения итерационного процесса.


Ниже приведена реализация данного алгоритма на языке программирования Python 3.




Метод LSQR.

Следующий метод полностью основан на классическом методе попеременных наименьших квадратов.
В метод внесены корректировки, устраняющие недостатки предшественника, такие как проблемы
с матрицами неполного ранга и накопление вычислительной погрешности.
Для решения задачи наименьших квадратов используется алгоритм LSQR.



Вместо решения системы линейных алгебраических уравнений на каждом шаге,
метод решает задачу минимизации , где ,  и  - матрицы.
Это позволяет избежать вышеперечисленных проблем,
однако повышает вычислительную сложность алгоритма.
Также в методе присутствует описанный выше шаг проецирования матрицы
на неотрицательную область.
Стоит отметить, что данный шаг портит решение, но он необходим,
чтобы обеспечить неотрицательность искомого разложения.


Ниже приведена реализация данного алгоритма на языке программирования Python 3.



Метод попеременных неотрицательных наименьших квадратов.

Данный метод вносит свои корректировки в метод попеременных наименьших квадратов,
улучшающие его характеристики.



Вместо решения системы линейных алгебраических уравнений на каждом шаге,
данный метод решает задачу минимизации   , где ,  и  - матрицы.
Необходимо обратить внимание на то, что на матрицу  накладывается ограничение неотрицательности,
что позволяет избежать применения шага проецирования матрицы неотрицательную область.
На практике это позволяет значительно повысить скорость сходимости,
однако влечёт за собой увеличение вычислительной сложности алгоритма.

Для решения задачи неотрицательных наименьших квадратов используется алгоритм, описанный в работе.


Ниже приведена реализация данного алгоритма на языке программирования Python 3.






Алгоритм инициализации матриц W и H.

Проблема изложенных алгоритмов неотрицательной матричной факторизации заключается в том,
что сходимость к глобальному минимуму не гарантируется.
Часто случается, что сходимость медленная и достигается неоптимальное приближение.

Эффективная процедура для вычисления хорошего начального приближения может быть основана на сингулярном разложении матрицы .



Пусть    является сингулярным разложением для матрицы ,
тогда следует взять первый сингулярный вектор  в качестве первого столбца в .
Затем необходимо взять матрицу    и заменить все её отрицательные элементы на ноль.
Так как  теперь является неотрицательной матрицей, то известно, что первый сингулярный вектор этой матрицы также неотрицательный.
Кроме того, предполагая что это достаточно хорошее приближение , возможно принять его за второй столбец .
Продолжим процедуру далее, пока вся матрица  не будет заполнена.

На практике метод даёт хороший прирост к сходимости,
однако с ростом размерности исходной матрицы его использование становится
нецелесообразным из-за большой вычислительной сложности.



Ниже приведена реализация данного алгоритма на языке программирования Python 3.









Сходимость методов решения задачи.

В общем случае, метод неотрицательной матричной факторизации любого класса
должен ввести решение в условие оптимальности,
чтобы определить действительно ли это минимум.
Если решение подходит под условия оптимальности, то это означает, что достигнут как минимум локальный минимум.

На самом деле, задача неотрицательной матричной факторизации некорректно поставлена,
что означает отсутствие единственного глобального минимума.
Необходимо принять во внимание, что минимальное решение, заданное матрицами  и ,
также может быть задано бесконечным числом одинаково хороших пар решений,
таких как  и , для любых неотрицательных  и .
Так как масштабирование и перестановка вызывают проблемы уникальности,
некоторые алгоритмы используют нормализацию строк или столбцов на каждой итерации.

Если в конкретном случае необходимо найти достаточно хороший локальный минимум,
то можно запустить алгоритм неотрицательной матричной факторизации с SVD инициализацией.

Скорость сходимости.

Доказательство скорости сходимости для этих алгоритмов является открытой нерешённой проблемой.
При определенных условиях возможно говорить о скоростях сходимости выбранных алгоритмов
или сравнивать относительные скорости сходимости между различными алгоритмами.

Критерий останова.

Для выбора критерия останова необходимо получить оценки качества решения.
Поскольку сингулярное разложение ранга , обозначаемое ,
обеспечивает нижнюю границу качества, решение должно как минимум удовлетворять следующему неравенству.


Где  - небольшая положительная константа, зависящая от параметров
конкретного алгоритма неотрицательной матричной факторизации.

Вычисление погрешности  требует больших вычислительных затрат,
которые могут быть немного уменьшены при правильной реализации.



Данное выражение содержит эффективный порядок матричных произведений и позволяет
единожды произвести вычисления связанные с .

Почти все алгоритмы неотрицательной матричной факторизации используют
максимальное количество итераций, как вторичный критерий останова.
Однако очевидно, что фиксированное количество итераций это не математически верный
подход для контроля итерационного процесса и максимальное количество итераций зависит от конкретной прикладной задачи.

Принимая во внимание всё вышесказанное и необходимость работы с разреженными данными,
воспользуемся следующим критерием останова.




Ниже приведена реализация данного алгоритма на языке программирования Python 3.
